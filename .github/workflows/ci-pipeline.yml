name: CI Pipeline for .NET Web API

on:
  push:
    branches: [ '*' ]  # Trigger on all branches
  pull_request:
    branches: [ '*' ]  # Trigger on PRs to all branches
  workflow_dispatch:  # Allows manual triggering

# Required permissions for security scanning
permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write

env:
  DOTNET_VERSION: '8.0.x'  # Matches your .NET 8 project
  IMAGE_NAME: dotnet-webapi  # Name for the container image
  REGISTRY_PATH: hkjctest.jfrog.io/alley-oop-container/github-actions  # JFrog registry path
  # SonarCloud configuration - Update these values for your account
  SONAR_PROJECT_KEY: 'thiago-tota_gha-dotnet-webapi'
  SONAR_ORGANIZATION: 'thiago-tota'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration Release --no-restore
      
    - name: Test
      run: dotnet test Dotnet.Webapi.Tests/Dotnet.Webapi.Tests.csproj --configuration Release --no-build --verbosity normal --logger trx --results-directory TestResults
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: TestResults/*.trx
        retention-days: 7
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          Dotnet.Webapi/bin/Release/net8.0
          Dotnet.Webapi/Dockerfile
        retention-days: 1

  snyk-security-scan:
    needs: build-and-test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build project for Snyk analysis
      run: dotnet build --configuration Release --no-restore
      
    - name: Setup Snyk CLI
      uses: snyk/actions/setup@master
      
    - name: Run Snyk to check for vulnerabilities
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      run: |
        # Scan from project directory for better detection
        cd Dotnet.Webapi && snyk test --severity-threshold=high --sarif-file-output=../snyk.sarif --json-file-output=../snyk-results.json || true
        
        # Create summary for GitHub Actions
        echo "## 🛡️ Snyk Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f ../snyk-results.json ]; then
          # Parse JSON results and create summary
          VULNERABILITIES=$(cat ../snyk-results.json | jq -r '.vulnerabilities | length' 2>/dev/null || echo "0")
          HIGH_VULNS=$(cat ../snyk-results.json | jq -r '[.vulnerabilities[] | select(.severity == "high")] | length' 2>/dev/null || echo "0")
          MEDIUM_VULNS=$(cat ../snyk-results.json | jq -r '[.vulnerabilities[] | select(.severity == "medium")] | length' 2>/dev/null || echo "0")
          LOW_VULNS=$(cat ../snyk-results.json | jq -r '[.vulnerabilities[] | select(.severity == "low")] | length' 2>/dev/null || echo "0")
          
          echo "### Code Vulnerability Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔴 High | $HIGH_VULNS |" >> $GITHUB_STEP_SUMMARY
          echo "| 🟡 Medium | $MEDIUM_VULNS |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔵 Low | $LOW_VULNS |" >> $GITHUB_STEP_SUMMARY
          echo "| **Total** | **$VULNERABILITIES** |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$VULNERABILITIES" -gt "0" ]; then
            echo "⚠️ **Action Required**: $VULNERABILITIES vulnerabilities found in dependencies" >> $GITHUB_STEP_SUMMARY
            echo "📋 Check the Security tab for detailed vulnerability information" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **No vulnerabilities found** - All dependencies are secure!" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "❌ **Scan Failed**: Unable to generate vulnerability report" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
    - name: Upload Snyk results to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: snyk.sarif

  sonarqube-scan:
    needs: build-and-test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # Shallow clones should be disabled for better analysis
        fetch-depth: 0
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Setup Java (required for SonarQube Scanner)
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Install SonarQube Scanner for .NET
      run: |
        dotnet tool install --global dotnet-sonarscanner
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Begin SonarQube analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        # Check if running on SonarCloud or self-hosted
        echo "Starting SonarQube analysis..."
        echo "Project Key: ${{ env.SONAR_PROJECT_KEY }}"
        
        # Try without organization first (for troubleshooting)
        dotnet sonarscanner begin \
          /k:"${{ env.SONAR_PROJECT_KEY }}" \
          /o:"${{ env.SONAR_ORGANIZATION }}" \
          /d:sonar.token="${SONAR_TOKEN}" \
          /d:sonar.host.url="https://sonarcloud.io" \
          /d:sonar.cs.dotcover.reportsPaths="**/TestResults/**/coverage.cobertura.xml" \
          /d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx" \
          /d:sonar.scanner.skipJreProvisioning=true
        
    - name: Build and Test with Coverage
      run: |
        dotnet build --configuration Release --no-restore
        dotnet test Dotnet.Webapi.Tests/Dotnet.Webapi.Tests.csproj \
          --configuration Release \
          --no-build \
          --logger trx \
          --results-directory TestResults \
          --collect:"XPlat Code Coverage" \
          --settings coverlet.runsettings
        
    - name: End SonarQube analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: dotnet sonarscanner end /d:sonar.token="${SONAR_TOKEN}"
      
    - name: Create SonarQube Summary
      if: always()
      run: |
        echo "## 📊 SonarQube Code Quality Analysis" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Analysis Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Project**: ${{ env.SONAR_PROJECT_KEY }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Organization**: ${{ env.SONAR_ORGANIZATION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 View Results" >> $GITHUB_STEP_SUMMARY
        echo "📈 [View detailed analysis on SonarCloud](https://sonarcloud.io/project/overview?id=${{ env.SONAR_PROJECT_KEY }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Analysis Coverage" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Code Quality Gates" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Security Hotspots" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Code Coverage Analysis" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Code Duplication Detection" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Maintainability Assessment" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

  build-and-scan-docker-image:
    needs: [build-and-test, snyk-security-scan, sonarqube-scan]
    runs-on: ubuntu-latest
    
    outputs:
      image-name: ${{ steps.build-info.outputs.image-name }}
      image-tag: ${{ steps.build-info.outputs.image-tag }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Build Docker Image
      id: build-info
      env:
        BRANCH_NAME: ${{ github.ref_name }}
        COMMIT_SHA: ${{ github.sha }}
        RUN_NUMBER: ${{ github.run_number }}
      run: |
        # Create meaningful image tags based on context
        SHORT_SHA=${COMMIT_SHA:0:8}
        
        if [[ "$BRANCH_NAME" == "main" || "$BRANCH_NAME" == "master" ]]; then
          # Main branch: use semantic-like versioning with date and commit
          DATE_TAG=$(date +%Y.%m.%d)
          VERSION_TAG="${DATE_TAG}-${SHORT_SHA}"
          VERSIONED_IMAGE=${{ env.REGISTRY_PATH }}/${{ env.IMAGE_NAME }}:${VERSION_TAG}
          
          # Also tag as 'latest' for main branch
          LATEST_IMAGE=${{ env.REGISTRY_PATH }}/${{ env.IMAGE_NAME }}:latest
        elif [[ "$BRANCH_NAME" =~ ^v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
          # Release tags: use the tag name directly
          VERSION_TAG="$BRANCH_NAME"
          VERSIONED_IMAGE=${{ env.REGISTRY_PATH }}/${{ env.IMAGE_NAME }}:${VERSION_TAG}
        else
          # Feature branches: branch-commit-run format
          SAFE_BRANCH_NAME=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')
          VERSION_TAG="${SAFE_BRANCH_NAME}-${SHORT_SHA}-${RUN_NUMBER}"
          VERSIONED_IMAGE=${{ env.REGISTRY_PATH }}/${{ env.IMAGE_NAME }}:${VERSION_TAG}
        fi
        
        # Build the Docker image
        echo "Building Docker image..."
        echo "Branch: $BRANCH_NAME"
        echo "Commit: $SHORT_SHA"
        echo "Version Tag: $VERSION_TAG"
        echo "Image: $VERSIONED_IMAGE"
        
        if ! docker build -f ./Dotnet.Webapi/Dockerfile -t ${VERSIONED_IMAGE} .; then
          echo "❌ Docker build failed"
          exit 1
        fi
        
        # Build latest tag for main branch
        if [[ "$BRANCH_NAME" == "main" || "$BRANCH_NAME" == "master" ]]; then
          if ! docker build -f ./Dotnet.Webapi/Dockerfile -t ${LATEST_IMAGE} .; then
            echo "❌ Docker build failed for latest tag"
            exit 1
          fi
          echo "✅ Also tagged as: ${LATEST_IMAGE}"
        fi
        
        echo "✅ Docker build completed successfully"
        
        # Create Docker build summary
        echo "## 🐳 Docker Image Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Build Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: $BRANCH_NAME" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: $SHORT_SHA" >> $GITHUB_STEP_SUMMARY
        echo "- **Version Tag**: $VERSION_TAG" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry**: ${{ env.REGISTRY_PATH }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Built Images" >> $GITHUB_STEP_SUMMARY
        echo "- 📦 \`${VERSIONED_IMAGE}\`" >> $GITHUB_STEP_SUMMARY
        if [[ "$BRANCH_NAME" == "main" || "$BRANCH_NAME" == "master" ]]; then
          echo "- 📦 \`${LATEST_IMAGE}\`" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- 🔍 Security scanning with Snyk" >> $GITHUB_STEP_SUMMARY
        if [[ "$BRANCH_NAME" == "main" || "$BRANCH_NAME" == "master" ]]; then
          echo "- 🚀 Push to JFrog Artifactory (main branch)" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ⏭️ Scan only (feature branch - no push)" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Set outputs for other jobs
        echo "image-name=${VERSIONED_IMAGE}" >> $GITHUB_OUTPUT
        echo "image-tag=${VERSION_TAG}" >> $GITHUB_OUTPUT
        echo "commit-sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
        
        # Output the built image details
        echo "✅ Successfully built image:"
        echo " - ${VERSIONED_IMAGE}"

    - name: Setup Snyk CLI for Docker Scanning
      uses: snyk/actions/setup@master
      
    - name: Run Snyk Docker Security Scan
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        BRANCH_NAME: ${{ github.ref_name }}
        COMMIT_SHA: ${{ github.sha }}
        RUN_NUMBER: ${{ github.run_number }}
      run: |
        # Recreate the same image naming logic as build step
        SHORT_SHA=${COMMIT_SHA:0:8}
        
        if [[ "$BRANCH_NAME" == "main" || "$BRANCH_NAME" == "master" ]]; then
          DATE_TAG=$(date +%Y.%m.%d)
          VERSION_TAG="${DATE_TAG}-${SHORT_SHA}"
          VERSIONED_IMAGE=${{ env.REGISTRY_PATH }}/${{ env.IMAGE_NAME }}:${VERSION_TAG}
        elif [[ "$BRANCH_NAME" =~ ^v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
          VERSION_TAG="$BRANCH_NAME"
          VERSIONED_IMAGE=${{ env.REGISTRY_PATH }}/${{ env.IMAGE_NAME }}:${VERSION_TAG}
        else
          SAFE_BRANCH_NAME=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')
          VERSION_TAG="${SAFE_BRANCH_NAME}-${SHORT_SHA}-${RUN_NUMBER}"
          VERSIONED_IMAGE=${{ env.REGISTRY_PATH }}/${{ env.IMAGE_NAME }}:${VERSION_TAG}
        fi
        
        echo "Scanning Docker image for vulnerabilities..."
        echo "Branch: $BRANCH_NAME"
        echo "Commit: $SHORT_SHA"
        echo "Version Tag: $VERSION_TAG"
        echo "Image: $VERSIONED_IMAGE"
        
        # Run Snyk container scan with JSON output for summary
        snyk container test $VERSIONED_IMAGE \
          --severity-threshold=high \
          --sarif-file-output=snyk-docker.sarif \
          --json-file-output=snyk-docker-results.json \
          --file=./Dotnet.Webapi/Dockerfile || true
          
        # Create Docker scan summary
        echo "## 🐳 Docker Image Security Scan" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Scanned Image" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: \`$VERSIONED_IMAGE\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Base Image**: .NET 8 Runtime" >> $GITHUB_STEP_SUMMARY
        echo "- **Dockerfile**: \`./Dotnet.Webapi/Dockerfile\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f snyk-docker-results.json ]; then
          # Parse container scan results
          CONTAINER_VULNS=$(cat snyk-docker-results.json | jq -r '.vulnerabilities | length' 2>/dev/null || echo "0")
          HIGH_CONTAINER_VULNS=$(cat snyk-docker-results.json | jq -r '[.vulnerabilities[] | select(.severity == "high")] | length' 2>/dev/null || echo "0")
          MEDIUM_CONTAINER_VULNS=$(cat snyk-docker-results.json | jq -r '[.vulnerabilities[] | select(.severity == "medium")] | length' 2>/dev/null || echo "0")
          LOW_CONTAINER_VULNS=$(cat snyk-docker-results.json | jq -r '[.vulnerabilities[] | select(.severity == "low")] | length' 2>/dev/null || echo "0")
          
          echo "### Container Vulnerability Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔴 High | $HIGH_CONTAINER_VULNS |" >> $GITHUB_STEP_SUMMARY
          echo "| 🟡 Medium | $MEDIUM_CONTAINER_VULNS |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔵 Low | $LOW_CONTAINER_VULNS |" >> $GITHUB_STEP_SUMMARY
          echo "| **Total** | **$CONTAINER_VULNS** |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$CONTAINER_VULNS" -gt "0" ]; then
            echo "⚠️ **Container Security Issues**: $CONTAINER_VULNS vulnerabilities found in base image or dependencies" >> $GITHUB_STEP_SUMMARY
            echo "🔍 Review Security tab for container-specific vulnerabilities" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **Container Secure**: No vulnerabilities found in Docker image!" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "❌ **Container Scan Failed**: Unable to generate container vulnerability report" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
          
    - name: Upload Snyk Docker results to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: snyk-docker.sarif
        category: snyk-docker

  push-docker-image-jfrog:
    needs: build-and-scan-docker-image
    runs-on: ubuntu-latest
    # Only push to registry on main/master branch or manual trigger
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
        
    - name: Setup JFrog CLI via OIDC
      uses: jfrog/setup-jfrog-cli@v4
      env:
        JF_URL: ${{ vars.JF_URL }}
      with:
        oidc-provider-name: gha-jfrog 
        oidc-audience: hkjc_audience

    - name: Verify JFrog Connection
      run: |
        echo "Testing JFrog connection..."
        jf rt ping

    - name: Rebuild Docker Image for Push
      env:
        BRANCH_NAME: ${{ github.ref_name }}
        COMMIT_SHA: ${{ github.sha }}
        RUN_NUMBER: ${{ github.run_number }}
      run: |
        # Recreate the same image naming logic as build step
        SHORT_SHA=${COMMIT_SHA:0:8}
        
        if [[ "$BRANCH_NAME" == "main" || "$BRANCH_NAME" == "master" ]]; then
          DATE_TAG=$(date +%Y.%m.%d)
          VERSION_TAG="${DATE_TAG}-${SHORT_SHA}"
          VERSIONED_IMAGE=${{ env.REGISTRY_PATH }}/${{ env.IMAGE_NAME }}:${VERSION_TAG}
          LATEST_IMAGE=${{ env.REGISTRY_PATH }}/${{ env.IMAGE_NAME }}:latest
        elif [[ "$BRANCH_NAME" =~ ^v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
          VERSION_TAG="$BRANCH_NAME"
          VERSIONED_IMAGE=${{ env.REGISTRY_PATH }}/${{ env.IMAGE_NAME }}:${VERSION_TAG}
        else
          SAFE_BRANCH_NAME=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')
          VERSION_TAG="${SAFE_BRANCH_NAME}-${SHORT_SHA}-${RUN_NUMBER}"
          VERSIONED_IMAGE=${{ env.REGISTRY_PATH }}/${{ env.IMAGE_NAME }}:${VERSION_TAG}
        fi
        
        echo "Rebuilding Docker image for push..."
        echo "Branch: $BRANCH_NAME"
        echo "Commit: $SHORT_SHA"
        echo "Version Tag: $VERSION_TAG"
        echo "Image: $VERSIONED_IMAGE"
        
        if ! docker build -f ./Dotnet.Webapi/Dockerfile -t ${VERSIONED_IMAGE} .; then
          echo "❌ Docker build failed"
          exit 1
        fi
        
        # Build latest tag for main branch
        if [[ "$BRANCH_NAME" == "main" || "$BRANCH_NAME" == "master" ]]; then
          if ! docker build -f ./Dotnet.Webapi/Dockerfile -t ${LATEST_IMAGE} .; then
            echo "❌ Docker build failed for latest tag"
            exit 1
          fi
          echo "✅ Also built: ${LATEST_IMAGE}"
        fi
        
        echo "✅ Docker image rebuilt successfully"

    - name: Push Docker Image to JFrog
      env:
        BRANCH_NAME: ${{ github.ref_name }}
        COMMIT_SHA: ${{ github.sha }}
        RUN_NUMBER: ${{ github.run_number }}
      run: |
        # Recreate the same image naming logic as build/rebuild steps
        SHORT_SHA=${COMMIT_SHA:0:8}
        
        if [[ "$BRANCH_NAME" == "main" || "$BRANCH_NAME" == "master" ]]; then
          DATE_TAG=$(date +%Y.%m.%d)
          VERSION_TAG="${DATE_TAG}-${SHORT_SHA}"
          VERSIONED_IMAGE=${{ env.REGISTRY_PATH }}/${{ env.IMAGE_NAME }}:${VERSION_TAG}
          LATEST_IMAGE=${{ env.REGISTRY_PATH }}/${{ env.IMAGE_NAME }}:latest
        elif [[ "$BRANCH_NAME" =~ ^v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
          VERSION_TAG="$BRANCH_NAME"
          VERSIONED_IMAGE=${{ env.REGISTRY_PATH }}/${{ env.IMAGE_NAME }}:${VERSION_TAG}
        else
          SAFE_BRANCH_NAME=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')
          VERSION_TAG="${SAFE_BRANCH_NAME}-${SHORT_SHA}-${RUN_NUMBER}"
          VERSIONED_IMAGE=${{ env.REGISTRY_PATH }}/${{ env.IMAGE_NAME }}:${VERSION_TAG}
        fi
        
        # Push the versioned Docker image to JFrog Artifactory
        echo "Pushing image to JFrog Artifactory..."
        echo "Branch: $BRANCH_NAME"
        echo "Commit: $SHORT_SHA"
        echo "Version Tag: $VERSION_TAG"
        echo "Image: $VERSIONED_IMAGE"
        
        if ! jf docker push ${VERSIONED_IMAGE}; then
          echo "❌ Failed to push versioned image"
          exit 1
        fi
        
        # Push latest tag for main branch
        if [[ "$BRANCH_NAME" == "main" || "$BRANCH_NAME" == "master" ]]; then
          echo "Pushing latest tag..."
          if ! jf docker push ${LATEST_IMAGE}; then
            echo "❌ Failed to push latest image"
            exit 1
          fi
        fi
        
        # Create comprehensive push summary
        echo "## 🚀 Docker Image Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Deployment Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry**: JFrog Artifactory" >> $GITHUB_STEP_SUMMARY
        echo "- **Repository**: ${{ env.REGISTRY_PATH }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: $BRANCH_NAME" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: $SHORT_SHA" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Number**: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Pushed Images" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ \`${VERSIONED_IMAGE}\`" >> $GITHUB_STEP_SUMMARY
        if [[ "$BRANCH_NAME" == "main" || "$BRANCH_NAME" == "master" ]]; then
          echo "- ✅ \`${LATEST_IMAGE}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Deployment Ready" >> $GITHUB_STEP_SUMMARY
          echo "This image is now available for production deployment!" >> $GITHUB_STEP_SUMMARY
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🧪 Development Image" >> $GITHUB_STEP_SUMMARY
          echo "This feature branch image is available for testing." >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Build Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Security scanned (Snyk)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Code quality checked (SonarQube)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Tests passed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Container security verified" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "$BRANCH_NAME" == "main" || "$BRANCH_NAME" == "master" ]]; then
          echo "✅ Successfully pushed both images:"
          echo " - ${VERSIONED_IMAGE}"
          echo " - ${LATEST_IMAGE}"
        else
          echo "✅ Successfully pushed image:"
          echo " - ${VERSIONED_IMAGE}"
        fi
          
    - name: Publish Build info With JFrog CLI
      env:
        # Generated and maintained by GitHub
        JFROG_CLI_BUILD_NAME: dotnet-webapi
        # JFrog organization secret
        JFROG_CLI_BUILD_NUMBER: ${{ github.run_number }}
      run: |
        # Collect environment variables for the build
        jf rt build-collect-env
        # Collect VCS details from git and add them to the build
        jf rt build-add-git
        # Publish build info
        jf rt build-publish
