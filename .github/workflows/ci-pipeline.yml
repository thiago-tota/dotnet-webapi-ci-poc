name: CI Pipeline for .NET Web API

on:
  push:
    branches: [ '*' ]  # Trigger on all branches
  pull_request:
    branches: [ '*' ]  # Trigger on PRs to all branches
  workflow_dispatch:  # Allows manual triggering

env:
  DOTNET_VERSION: '8.0.x'  # Matches your .NET 8 project
  IMAGE_NAME: dotnet-webapi  # Name for the container image

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration Release --no-restore
      
    - name: Test
      run: dotnet test Dotnet.Webapi.Tests/Dotnet.Webapi.Tests.csproj --configuration Release --no-build --verbosity normal --logger trx --results-directory TestResults
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: TestResults/*.trx
        retention-days: 7
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          Dotnet.Webapi/bin/Release/net8.0
          Dotnet.Webapi/Dockerfile
        retention-days: 1

  build-and-push-image-jfrog:
    needs: build-and-test
    runs-on: ubuntu-latest
    # Only run on main/master branch or manual trigger
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup JFrog CLI
      uses: jfrog/setup-jfrog-cli@v4
      env:
        JF_URL: ${{ vars.JF_URL }}
        JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

    - name: Verify JFrog Connection
      run: |
        echo "Testing JFrog connection..."
        jf rt ping

    - name: Build Tag and push Docker Image
      env:
        REGISTRY_PATH: thiagotota.jfrog.io/images-local/github-actions
        IMAGE_NAME: dotnet-webapi
        VERSION_TAG: ${{ github.run_number }}
      run: |
        # Define image names with tags
        VERSIONED_IMAGE=${REGISTRY_PATH}/${IMAGE_NAME}:${VERSION_TAG}
        LATEST_IMAGE=${REGISTRY_PATH}/${IMAGE_NAME}:latest
        
        # Build the Docker image with Alpine Linux base
        echo "Building Docker image..."
        if ! jf docker build -f ./Dotnet.Webapi/Dockerfile -t ${VERSIONED_IMAGE} -t ${LATEST_IMAGE} .; then
          echo "❌ Docker build failed"
          exit 1
        fi
        echo "✅ Docker build completed successfully"
        
        # Optional: Scan the image for vulnerabilities (commented out - requires JFrog Xray)
        # echo "Scanning image for vulnerabilities..."
        # jf docker scan ${VERSIONED_IMAGE}
        
        # Push both tags to JFrog Artifactory
        echo "Pushing versioned tag to JFrog Artifactory..."
        if ! jf docker push ${VERSIONED_IMAGE}; then
          echo "❌ Failed to push versioned image"
          exit 1
        fi
        
        echo "Pushing latest tag to JFrog Artifactory..."
        if ! jf docker push ${LATEST_IMAGE}; then
          echo "❌ Failed to push latest image"
          exit 1
        fi
        
        # Output the pushed image details
        echo "✅ Successfully pushed images:"
        echo " - ${VERSIONED_IMAGE}"
        echo " - ${LATEST_IMAGE}"
          
    - name: Publish Build info With JFrog CLI
      env:
        # Generated and maintained by GitHub
        JFROG_CLI_BUILD_NAME: dotnet-webapi
        # JFrog organization secret
        JFROG_CLI_BUILD_NUMBER: ${{ github.run_number }}
      run: |
        # Collect environment variables for the build
        jf rt build-collect-env
        # Collect VCS details from git and add them to the build
        jf rt build-add-git
        # Publish build info
        jf rt build-publish