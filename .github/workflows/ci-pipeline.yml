name: CI Pipeline for .NET Web API

on:
  push:
    branches: [ '*' ]  # Trigger on all branches
  pull_request:
    branches: [ '*' ]  # Trigger on PRs to all branches
  workflow_dispatch:  # Allows manual triggering

# Required permissions for security scanning
permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write

env:
  DOTNET_VERSION: '8.0.x'  # Matches your .NET 8 project
  IMAGE_NAME: dotnet-webapi  # Name for the container image
  # SonarCloud configuration - Update these values for your account
  SONAR_PROJECT_KEY: 'thiago-tota_gha-dotnet-webapi'
  SONAR_ORGANIZATION: 'thiago-tota'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration Release --no-restore
      
    - name: Test
      run: dotnet test Dotnet.Webapi.Tests/Dotnet.Webapi.Tests.csproj --configuration Release --no-build --verbosity normal --logger trx --results-directory TestResults
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: TestResults/*.trx
        retention-days: 7
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          Dotnet.Webapi/bin/Release/net8.0
          Dotnet.Webapi/Dockerfile
        retention-days: 1

  snyk-security-scan:
    needs: build-and-test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build project for Snyk analysis
      run: dotnet build --configuration Release --no-restore
      
    - name: Setup Snyk CLI
      uses: snyk/actions/setup@master
      
    - name: Run Snyk to check for vulnerabilities
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      run: |
        # Scan from project directory for better detection
        cd Dotnet.Webapi && snyk test --severity-threshold=high --sarif-file-output=../snyk.sarif
        
    - name: Upload Snyk results to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: snyk.sarif

  sonarqube-scan:
    needs: build-and-test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # Shallow clones should be disabled for better analysis
        fetch-depth: 0
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Setup Java (required for SonarQube Scanner)
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Install SonarQube Scanner for .NET
      run: |
        dotnet tool install --global dotnet-sonarscanner
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Begin SonarQube analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        # Check if running on SonarCloud or self-hosted
        echo "Starting SonarQube analysis..."
        echo "Project Key: ${{ env.SONAR_PROJECT_KEY }}"
        
        # Try without organization first (for troubleshooting)
        dotnet sonarscanner begin \
          /k:"${{ env.SONAR_PROJECT_KEY }}" \
          /o:"${{ env.SONAR_ORGANIZATION }}" \
          /d:sonar.token="${SONAR_TOKEN}" \
          /d:sonar.host.url="https://sonarcloud.io" \
          /d:sonar.cs.dotcover.reportsPaths="**/TestResults/**/coverage.cobertura.xml" \
          /d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx" \
          /d:sonar.scanner.skipJreProvisioning=true
        
    - name: Build and Test with Coverage
      run: |
        dotnet build --configuration Release --no-restore
        dotnet test Dotnet.Webapi.Tests/Dotnet.Webapi.Tests.csproj \
          --configuration Release \
          --no-build \
          --logger trx \
          --results-directory TestResults \
          --collect:"XPlat Code Coverage" \
          --settings coverlet.runsettings
        
    - name: End SonarQube analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: dotnet sonarscanner end /d:sonar.token="${SONAR_TOKEN}"

  build-docker-image:
    needs: [build-and-test, snyk-security-scan, sonarqube-scan]
    runs-on: ubuntu-latest
    
    outputs:
      image-name: ${{ steps.build-info.outputs.image-name }}
      image-tag: ${{ steps.build-info.outputs.image-tag }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
        
    - name: Setup JFrog CLI via OIDC
      uses: jfrog/setup-jfrog-cli@v4
      env:
        JF_URL: ${{ vars.JF_URL }}
      with:
        oidc-provider-name: gha-jfrog 
        oidc-audience: hkjc_audience

    - name: Verify JFrog Connection
      run: |
        echo "Testing JFrog connection..."
        jf rt ping

    - name: Build Docker Image
      id: build-info
      env:
        REGISTRY_PATH: hkjctest.jfrog.io/alley-oop-container/github-actions
        IMAGE_NAME: dotnet-webapi
        VERSION_TAG: ${{ github.run_number }}
        BRANCH_NAME: ${{ github.ref_name }}
      run: |
        # Create branch-specific tag for non-main branches
        if [[ "$BRANCH_NAME" == "main" || "$BRANCH_NAME" == "master" ]]; then
          VERSIONED_IMAGE=${REGISTRY_PATH}/${IMAGE_NAME}:${VERSION_TAG}
        else
          # For feature branches, include branch name in tag
          SAFE_BRANCH_NAME=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')
          VERSIONED_IMAGE=${REGISTRY_PATH}/${IMAGE_NAME}:${VERSION_TAG}-${SAFE_BRANCH_NAME}
        fi
        
        # Build the Docker image
        echo "Building Docker image..."
        echo "Branch: $BRANCH_NAME"
        echo "Image: $VERSIONED_IMAGE"
        if ! jf docker build -f ./Dotnet.Webapi/Dockerfile -t ${VERSIONED_IMAGE} .; then
          echo "❌ Docker build failed"
          exit 1
        fi
        echo "✅ Docker build completed successfully"
        
        # Set outputs for other jobs
        echo "image-name=${VERSIONED_IMAGE}" >> $GITHUB_OUTPUT
        echo "image-tag=${VERSION_TAG}" >> $GITHUB_OUTPUT
        
        # Output the built image details
        echo "✅ Successfully built image:"
        echo " - ${VERSIONED_IMAGE}"

  snyk-docker-scan:
    needs: build-docker-image
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
        
    - name: Setup JFrog CLI via OIDC
      uses: jfrog/setup-jfrog-cli@v4
      env:
        JF_URL: ${{ vars.JF_URL }}
      with:
        oidc-provider-name: gha-jfrog 
        oidc-audience: hkjc_audience
        
    - name: Setup Snyk CLI
      uses: snyk/actions/setup@master
      
    - name: Login to JFrog Docker Registry
      run: |
        echo "Logging into JFrog Docker registry..."
        jf docker-login hkjctest.jfrog.io
        
    - name: Pull Docker Image for Scanning
      run: |
        echo "Pulling image for security scan..."
        docker pull ${{ needs.build-docker-image.outputs.image-name }}
        
    - name: Run Snyk Docker Security Scan
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      run: |
        echo "Scanning Docker image for vulnerabilities..."
        snyk container test ${{ needs.build-docker-image.outputs.image-name }} \
          --severity-threshold=high \
          --sarif-file-output=snyk-docker.sarif \
          --file=./Dotnet.Webapi/Dockerfile
          
    - name: Upload Snyk Docker results to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: snyk-docker.sarif
        category: snyk-docker

  push-docker-image-jfrog:
    needs: [build-docker-image, snyk-docker-scan]
    runs-on: ubuntu-latest
    # Only push to registry on main/master branch or manual trigger
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
        
    - name: Setup JFrog CLI via OIDC
      uses: jfrog/setup-jfrog-cli@v4
      env:
        JF_URL: ${{ vars.JF_URL }}
      with:
        oidc-provider-name: gha-jfrog 
        oidc-audience: hkjc_audience

    - name: Verify JFrog Connection
      run: |
        echo "Testing JFrog connection..."
        jf rt ping

    - name: Push Docker Image to JFrog
      run: |
        # Get the image name from the build job
        VERSIONED_IMAGE="${{ needs.build-docker-image.outputs.image-name }}"
        
        # Push the Docker image to JFrog Artifactory
        echo "Pushing image to JFrog Artifactory..."
        echo "Image: $VERSIONED_IMAGE"
        if ! jf docker push ${VERSIONED_IMAGE}; then
          echo "❌ Failed to push image"
          exit 1
        fi
        
        # Output the pushed image details
        echo "✅ Successfully pushed image:"
        echo " - ${VERSIONED_IMAGE}"
          
    - name: Publish Build info With JFrog CLI
      env:
        # Generated and maintained by GitHub
        JFROG_CLI_BUILD_NAME: dotnet-webapi
        # JFrog organization secret
        JFROG_CLI_BUILD_NUMBER: ${{ github.run_number }}
      run: |
        # Collect environment variables for the build
        jf rt build-collect-env
        # Collect VCS details from git and add them to the build
        jf rt build-add-git
        # Publish build info
        jf rt build-publish
