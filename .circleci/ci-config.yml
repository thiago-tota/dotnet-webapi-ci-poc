version: 2.1

# ============================================================================
# CircleCI Pipeline for .NET Web API
# ============================================================================

# Environment variables
environment: &default_environment
  DOTNET_VERSION: "8.0.x"
  IMAGE_NAME: "dotnet-webapi"
  REGISTRY_PATH: "hkjctest.jfrog.io/alley-oop-container/circleci"
  JFROG_REPOSITORY: "alley-oop-container/circleci"
  TEST_RESULTS_DIR: "TestResults"
  APP_NAME: "Dotnet.Webapi"
  UNIT_TEST_PROJECT_NAME: "Dotnet.Webapi.Tests"
  SNYK_CLI_DOWNLOAD_URL: "https://github.com/snyk/snyk/releases/download/latest/snyk-linux"
  SONAR_HOST_URL: "https://sonarcloud.io"
  SONAR_PROJECT_URL: "https://sonarcloud.io/project/overview?id=thiago-tota_gha-dotnet-webapi"
  GIT_REPOSITORY_URL: "https://github.com/thiago-tota/dotnet-webapi-ci-poc"
  SONAR_PROJECT_KEY: "thiago-tota_gha-dotnet-webapi"
  SONAR_ORGANIZATION: "thiago-tota"

# Orbs for extended functionality
orbs:
  docker: circleci/docker@2.8.2
  snyk: snyk/snyk@2.3.0
  artifactory: circleci/artifactory@1.0.0
  sonarcloud: sonarsource/sonarcloud@3.0.0

# Executors
executors:
  dotnet-executor:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:8.0
    environment:
      <<: *default_environment

  ubuntu-docker:
    docker:
      - image: cimg/base:stable
    environment:
      <<: *default_environment

# Jobs
jobs:
  # ============================================================================
  # Build and Test Job
  # ============================================================================
  build-and-test:
    executor: dotnet-executor
    steps:
      - checkout

      - run:
          name: Display .NET Version
          command: dotnet --version

      - run:
          name: Restore Dependencies
          command: dotnet restore

      - run:
          name: Build Solution
          command: dotnet build --configuration Release --no-restore

      - run:
          name: Run Unit Tests
          command: |
            dotnet test ${UNIT_TEST_PROJECT_NAME}/${UNIT_TEST_PROJECT_NAME}.csproj \
              --configuration Release \
              --no-build \
              --verbosity normal \
              --logger trx \
              --results-directory ${TEST_RESULTS_DIR}

      - store_test_results:
          path: ${TEST_RESULTS_DIR}

      - store_artifacts:
          path: ${TEST_RESULTS_DIR}
          destination: test-results

      - persist_to_workspace:
          root: .
          paths:
            - ${APP_NAME}/bin/Release/net8.0
            - ${APP_NAME}/Dockerfile
            - ${TEST_RESULTS_DIR}

  # ============================================================================
  # Snyk Security Scan Job - Using Snyk Orb
  # ============================================================================
  snyk-security-scan:
    executor: dotnet-executor
    steps:
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: Restore Dependencies
          command: dotnet restore

      - run:
          name: Build for Snyk Analysis
          command: dotnet build --configuration Release --no-restore

      # Manual Snyk installation (orb has sudo issues in Docker containers)
      - run:
          name: Install and Run Snyk Security Scan
          command: |
            # Install Snyk CLI
            curl -o snyk-linux ${SNYK_CLI_DOWNLOAD_URL}
            chmod +x snyk-linux
            
            # Authenticate with Snyk
            ./snyk-linux auth $SNYK_TOKEN
            
            # Run security scan on .NET project
            ./snyk-linux test \
              --severity-threshold=high \
              --sarif-file-output=snyk.sarif \
              --json-file-output=snyk-results.json \
              --monitor || true
            
            echo "✅ Snyk security scan completed"

      - run:
          name: Create Snyk Security Summary
          command: |
            echo "## 🛡️ Snyk Security Scan Results" > snyk-summary.md
            echo "" >> snyk-summary.md
            
            if [ -f snyk-results.json ]; then
              VULNERABILITIES=$(cat snyk-results.json | jq -r '.vulnerabilities | length' 2>/dev/null || echo "0")
              HIGH_VULNS=$(cat snyk-results.json | jq -r '[.vulnerabilities[] | select(.severity == "high")] | length' 2>/dev/null || echo "0")
              MEDIUM_VULNS=$(cat snyk-results.json | jq -r '[.vulnerabilities[] | select(.severity == "medium")] | length' 2>/dev/null || echo "0")
              LOW_VULNS=$(cat snyk-results.json | jq -r '[.vulnerabilities[] | select(.severity == "low")] | length' 2>/dev/null || echo "0")
              
              echo "### Code Vulnerability Summary" >> snyk-summary.md
              echo "| Severity | Count |" >> snyk-summary.md
              echo "|----------|-------|" >> snyk-summary.md
              echo "| 🔴 High | $HIGH_VULNS |" >> snyk-summary.md
              echo "| 🟡 Medium | $MEDIUM_VULNS |" >> snyk-summary.md
              echo "| 🔵 Low | $LOW_VULNS |" >> snyk-summary.md
              echo "| **Total** | **$VULNERABILITIES** |" >> snyk-summary.md
              echo "" >> snyk-summary.md
              
              if [ "$VULNERABILITIES" -gt "0" ]; then
                echo "⚠️ **Action Required**: $VULNERABILITIES vulnerabilities found in dependencies" >> snyk-summary.md
              else
                echo "✅ **No vulnerabilities found** - All dependencies are secure!" >> snyk-summary.md
              fi
            else
              echo "❌ **Scan Failed**: Unable to generate vulnerability report" >> snyk-summary.md
            fi

      - store_artifacts:
          path: snyk.sarif
          destination: security-reports/snyk.sarif

      - store_artifacts:
          path: snyk-results.json
          destination: security-reports/snyk-results.json

      - store_artifacts:
          path: snyk-summary.md
          destination: security-reports/snyk-summary.md

  # ============================================================================
  # SonarQube Code Quality Scan Job - Optimized with SonarCloud Orb
  # ============================================================================
  sonarqube-scan:
    executor: dotnet-executor
    steps:
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: Restore Dependencies
          command: dotnet restore

      - run:
          name: Build and Test with Coverage
          command: |
            dotnet build --configuration Release --no-restore
            dotnet test ${UNIT_TEST_PROJECT_NAME}/${UNIT_TEST_PROJECT_NAME}.csproj \
              --configuration Release \
              --no-build \
              --logger trx \
              --results-directory ${TEST_RESULTS_DIR} \
              --collect:"XPlat Code Coverage" \
              --settings coverlet.runsettings

      - run:
          name: Create SonarCloud Configuration  
          command: |
            echo "sonar.projectKey=${SONAR_PROJECT_KEY}" > sonar-project.properties
            echo "sonar.organization=${SONAR_ORGANIZATION}" >> sonar-project.properties
            echo "sonar.host.url=${SONAR_HOST_URL}" >> sonar-project.properties
            echo "sonar.sources=${APP_NAME}" >> sonar-project.properties
            echo "sonar.tests=${UNIT_TEST_PROJECT_NAME}" >> sonar-project.properties
            echo "sonar.cs.dotcover.reportsPaths=**/TestResults/**/coverage.cobertura.xml" >> sonar-project.properties
            echo "sonar.cs.vstest.reportsPaths=**/TestResults/*.trx" >> sonar-project.properties
            echo "sonar.branch.name=${CIRCLE_BRANCH}" >> sonar-project.properties
            if [ -n "${CIRCLE_PR_NUMBER}" ]; then
              echo "sonar.pullrequest.key=${CIRCLE_PR_NUMBER}" >> sonar-project.properties
              echo "sonar.pullrequest.branch=${CIRCLE_BRANCH}" >> sonar-project.properties
              echo "sonar.pullrequest.base=main" >> sonar-project.properties
            fi
            cat sonar-project.properties

      # Use SonarCloud orb
      - sonarcloud/scan:
          sonar_token_variable_name: SONAR_TOKEN
          cache_version: 1

      - run:
          name: Create SonarQube Summary
          command: |
            echo "## 📊 SonarQube Code Quality Analysis" > sonarqube-summary.md
            echo "" >> sonarqube-summary.md
            echo "### Analysis Details" >> sonarqube-summary.md
            echo "- **Project**: ${SONAR_PROJECT_KEY}" >> sonarqube-summary.md
            echo "- **Organization**: ${SONAR_ORGANIZATION}" >> sonarqube-summary.md
            echo "- **Branch**: ${CIRCLE_BRANCH}" >> sonarqube-summary.md
            echo "- **Commit**: ${CIRCLE_SHA1}" >> sonarqube-summary.md
            echo "" >> sonarqube-summary.md
            echo "### 🔗 View Results" >> sonarqube-summary.md
            echo "📈 [View detailed analysis on SonarCloud](${SONAR_PROJECT_URL})" >> sonarqube-summary.md
            echo "" >> sonarqube-summary.md
            echo "### Analysis Coverage" >> sonarqube-summary.md
            echo "- ✅ Code Quality Gates" >> sonarqube-summary.md
            echo "- ✅ Security Hotspots" >> sonarqube-summary.md
            echo "- ✅ Code Coverage Analysis" >> sonarqube-summary.md
            echo "- ✅ Code Duplication Detection" >> sonarqube-summary.md
            echo "- ✅ Maintainability Assessment" >> sonarqube-summary.md
            echo "- ✅ Pull Request Analysis" >> sonarqube-summary.md

      - store_artifacts:
          path: sonarqube-summary.md
          destination: quality-reports/sonarqube-summary.md

  # ============================================================================
  # Docker Build and Scan Job - Optimized with Docker Orb
  # ============================================================================
  build-and-scan-docker-image:
    executor: ubuntu-docker
    steps:
      - checkout

      - attach_workspace:
          at: .

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: Generate Docker Image Tags
          command: |
            SHORT_SHA=${CIRCLE_SHA1:0:8}
            
            if [[ "${CIRCLE_BRANCH}" == "main" || "${CIRCLE_BRANCH}" == "master" ]]; then
              # Main branch: Use date-based versioning + latest
              DATE_TAG=$(date +%Y.%m.%d)
              VERSION_TAG="${DATE_TAG}-${SHORT_SHA}"
              VERSIONED_IMAGE="${REGISTRY_PATH}/${IMAGE_NAME}:${VERSION_TAG}"
              LATEST_IMAGE="${REGISTRY_PATH}/${IMAGE_NAME}:latest"
              echo "export VERSIONED_IMAGE='${VERSIONED_IMAGE}'" >> $BASH_ENV
              echo "export LATEST_IMAGE='${LATEST_IMAGE}'" >> $BASH_ENV
              echo "export BUILD_LATEST='true'" >> $BASH_ENV
              echo "export DOCKER_TAGS='${VERSION_TAG},latest'" >> $BASH_ENV
            elif [[ "${CIRCLE_BRANCH}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
              # Release branch: Use semantic version
              VERSION_TAG="${CIRCLE_BRANCH}"
              VERSIONED_IMAGE="${REGISTRY_PATH}/${IMAGE_NAME}:${VERSION_TAG}"
              echo "export VERSIONED_IMAGE='${VERSIONED_IMAGE}'" >> $BASH_ENV
              echo "export BUILD_LATEST='false'" >> $BASH_ENV
              echo "export DOCKER_TAGS='${VERSION_TAG}'" >> $BASH_ENV
            else
              # Feature branch: Use date + commit + run number (like GitHub Actions)
              DATE_TAG=$(date +%Y.%m.%d)
              VERSION_TAG="${DATE_TAG}-${SHORT_SHA}"
              VERSIONED_IMAGE="${REGISTRY_PATH}/${IMAGE_NAME}:${VERSION_TAG}"
              echo "export VERSIONED_IMAGE='${VERSIONED_IMAGE}'" >> $BASH_ENV
              echo "export BUILD_LATEST='false'" >> $BASH_ENV
              echo "export DOCKER_TAGS='${VERSION_TAG}'" >> $BASH_ENV
            fi
            
            echo "export VERSION_TAG='${VERSION_TAG}'" >> $BASH_ENV
            echo "export SHORT_SHA='${SHORT_SHA}'" >> $BASH_ENV
            
            echo "Branch: ${CIRCLE_BRANCH}"
            echo "Commit: ${SHORT_SHA}"
            echo "Version Tag: ${VERSION_TAG}"
            echo "Versioned Image: ${VERSIONED_IMAGE}"
            echo "Docker Tags: ${DOCKER_TAGS}"
      
      # Use Docker orb to build image with optimized caching and multi-tag support
      - docker/build:
          dockerfile: ./${APP_NAME}/Dockerfile
          image: ${REGISTRY_PATH}/${IMAGE_NAME}
          tag: ${DOCKER_TAGS}
          cache_from: ${REGISTRY_PATH}/${IMAGE_NAME}:latest
          extra_build_args: |
            --build-arg BUILDKIT_INLINE_CACHE=1
            --label org.opencontainers.image.source=${GIT_REPOSITORY_URL}
            --label org.opencontainers.image.revision=${CIRCLE_SHA1}
            --label org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            --label org.opencontainers.image.version=${VERSION_TAG}

      # Manual Snyk container scan (orb doesn't work well in Docker executor)
      - run:
          name: Install and Run Snyk Container Scan
          command: |
            # Install Snyk CLI
            curl -o snyk-linux ${SNYK_CLI_DOWNLOAD_URL}
            chmod +x snyk-linux
            
            # Authenticate with Snyk
            ./snyk-linux auth $SNYK_TOKEN
            
            # Run container scan
            ./snyk-linux container test ${VERSIONED_IMAGE} \
              --file=./${APP_NAME}/Dockerfile \
              --severity-threshold=high \
              --sarif-file-output=snyk-docker.sarif \
              --json-file-output=snyk-docker-results.json || true
            
            echo "✅ Snyk container scan completed"
      
      - run:
          name: Create Docker Security Summary
          command: |
            echo "## 🐳 Docker Image Security Scan" > docker-security-summary.md
            echo "" >> docker-security-summary.md
            echo "### Scanned Image" >> docker-security-summary.md
            echo "- **Image**: \`${VERSIONED_IMAGE}\`" >> docker-security-summary.md
            echo "- **Base Image**: .NET 8 Runtime" >> docker-security-summary.md
            echo "- **Dockerfile**: \`./${APP_NAME}/Dockerfile\`" >> docker-security-summary.md
            echo "" >> docker-security-summary.md
            
            if [ -f snyk-docker-results.json ]; then
              CONTAINER_VULNS=$(cat snyk-docker-results.json | jq -r '.vulnerabilities | length' 2>/dev/null || echo "0")
              HIGH_CONTAINER_VULNS=$(cat snyk-docker-results.json | jq -r '[.vulnerabilities[] | select(.severity == "high")] | length' 2>/dev/null || echo "0")
              MEDIUM_CONTAINER_VULNS=$(cat snyk-docker-results.json | jq -r '[.vulnerabilities[] | select(.severity == "medium")] | length' 2>/dev/null || echo "0")
              LOW_CONTAINER_VULNS=$(cat snyk-docker-results.json | jq -r '[.vulnerabilities[] | select(.severity == "low")] | length' 2>/dev/null || echo "0")
              
              echo "### Container Vulnerability Summary" >> docker-security-summary.md
              echo "| Severity | Count |" >> docker-security-summary.md
              echo "|----------|-------|" >> docker-security-summary.md
              echo "| 🔴 High | $HIGH_CONTAINER_VULNS |" >> docker-security-summary.md
              echo "| 🟡 Medium | $MEDIUM_CONTAINER_VULNS |" >> docker-security-summary.md
              echo "| 🔵 Low | $LOW_CONTAINER_VULNS |" >> docker-security-summary.md
              echo "| **Total** | **$CONTAINER_VULNS** |" >> docker-security-summary.md
              echo "" >> docker-security-summary.md
              
              if [ "$CONTAINER_VULNS" -gt "0" ]; then
                echo "⚠️ **Container Security Issues**: $CONTAINER_VULNS vulnerabilities found" >> docker-security-summary.md
              else
                echo "✅ **Container Secure**: No vulnerabilities found in Docker image!" >> docker-security-summary.md
              fi
            else
              echo "❌ **Container Scan Failed**: Unable to generate vulnerability report" >> docker-security-summary.md
            fi

      - store_artifacts:
          path: docker-security-summary.md
          destination: docker-reports/docker-security-summary.md

      - store_artifacts:
          path: snyk-docker.sarif
          destination: security-reports/snyk-docker.sarif

      - store_artifacts:
          path: snyk-docker-results.json
          destination: security-reports/snyk-docker-results.json

      - persist_to_workspace:
          root: .
          paths:
            - docker-security-summary.md

  # ============================================================================
  # JFrog Registry Push Job - Using Artifactory Orb
  # ============================================================================
  push-docker-image-jfrog:
    executor: ubuntu-docker
    steps:
      - checkout

      - attach_workspace:
          at: .

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: Generate Docker Image Tags for Push
          command: |
            SHORT_SHA=${CIRCLE_SHA1:0:8}
            
            if [[ "${CIRCLE_BRANCH}" == "main" || "${CIRCLE_BRANCH}" == "master" ]]; then
              # Main branch: Use date-based versioning + latest
              DATE_TAG=$(date +%Y.%m.%d)
              VERSION_TAG="${DATE_TAG}-${SHORT_SHA}"
              VERSIONED_IMAGE="${REGISTRY_PATH}/${IMAGE_NAME}:${VERSION_TAG}"
              LATEST_IMAGE="${REGISTRY_PATH}/${IMAGE_NAME}:latest"
              echo "export VERSIONED_IMAGE='${VERSIONED_IMAGE}'" >> $BASH_ENV
              echo "export LATEST_IMAGE='${LATEST_IMAGE}'" >> $BASH_ENV
              echo "export PUSH_LATEST='true'" >> $BASH_ENV
              echo "export DOCKER_TAGS='${VERSION_TAG},latest'" >> $BASH_ENV
            elif [[ "${CIRCLE_BRANCH}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
              # Release branch: Use semantic version
              VERSION_TAG="${CIRCLE_BRANCH}"
              VERSIONED_IMAGE="${REGISTRY_PATH}/${IMAGE_NAME}:${VERSION_TAG}"
              echo "export VERSIONED_IMAGE='${VERSIONED_IMAGE}'" >> $BASH_ENV
              echo "export PUSH_LATEST='false'" >> $BASH_ENV
              echo "export DOCKER_TAGS='${VERSION_TAG}'" >> $BASH_ENV
            else
              # Feature branch: Use date + commit (like GitHub Actions)
              DATE_TAG=$(date +%Y.%m.%d)
              VERSION_TAG="${DATE_TAG}-${SHORT_SHA}"
              VERSIONED_IMAGE="${REGISTRY_PATH}/${IMAGE_NAME}:${VERSION_TAG}"
              echo "export VERSIONED_IMAGE='${VERSIONED_IMAGE}'" >> $BASH_ENV
              echo "export PUSH_LATEST='false'" >> $BASH_ENV
              echo "export DOCKER_TAGS='${VERSION_TAG}'" >> $BASH_ENV
            fi
            
            echo "export VERSION_TAG='${VERSION_TAG}'" >> $BASH_ENV
            echo "export SHORT_SHA='${SHORT_SHA}'" >> $BASH_ENV

      # Use Artifactory orb to install and configure JFrog CLI
      - artifactory/install

      - run:
          name: Configure JFrog CLI
          command: |
            echo "Configuring JFrog CLI..."
            if [ -n "${ARTIFACTORY_API_KEY}" ]; then
              jfrog config add --url="${ARTIFACTORY_URL}" --access-token="${ARTIFACTORY_API_KEY}" --interactive=false
              echo "✅ JFrog CLI configured successfully"
            else
              echo "❌ ARTIFACTORY_API_KEY not found in environment"
              exit 1
            fi

      # Use Docker orb to rebuild image efficiently with same tags
      - docker/build:
          dockerfile: ./${APP_NAME}/Dockerfile
          image: ${REGISTRY_PATH}/${IMAGE_NAME}
          tag: ${DOCKER_TAGS}
          cache_from: ${REGISTRY_PATH}/${IMAGE_NAME}:latest
          extra_build_args: |
            --build-arg BUILDKIT_INLINE_CACHE=1
            --label org.opencontainers.image.source=${GIT_REPOSITORY_URL}
            --label org.opencontainers.image.revision=${CIRCLE_SHA1}
            --label org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            --label org.opencontainers.image.version=${VERSION_TAG}

      - run:
          name: Push Docker Image to JFrog
          command: |
            echo "Pushing image to JFrog Artifactory: ${VERSIONED_IMAGE}"
            jfrog rt docker-push ${VERSIONED_IMAGE} ${JFROG_REPOSITORY}

      - run:
          name: Push Latest Tag (Main Branch Only)
          command: |
            if [[ "${PUSH_LATEST}" == "true" ]]; then
              echo "Pushing latest tag: ${LATEST_IMAGE}"
              jfrog rt docker-push ${LATEST_IMAGE} ${JFROG_REPOSITORY}
            else
              echo "Skipping latest tag push (not main branch)"
            fi

      # Use Artifactory orb for build integration
      - artifactory/build-integration

      - run:
          name: Create Deployment Summary
          command: |
            echo "## 🚀 Docker Image Deployment Summary" > deployment-summary.md
            echo "" >> deployment-summary.md
            echo "### Deployment Details" >> deployment-summary.md
            echo "- **Registry**: JFrog Artifactory" >> deployment-summary.md
            echo "- **Repository**: ${REGISTRY_PATH}" >> deployment-summary.md
            echo "- **Branch**: ${CIRCLE_BRANCH}" >> deployment-summary.md
            echo "- **Commit**: ${SHORT_SHA}" >> deployment-summary.md
            echo "- **Build Number**: ${CIRCLE_BUILD_NUM}" >> deployment-summary.md
            echo "" >> deployment-summary.md
            echo "### 📦 Pushed Images" >> deployment-summary.md
            echo "- ✅ \`${VERSIONED_IMAGE}\`" >> deployment-summary.md
            if [[ "${PUSH_LATEST}" == "true" ]]; then
              echo "- ✅ \`${LATEST_IMAGE}\`" >> deployment-summary.md
              echo "" >> deployment-summary.md
              echo "### 🎯 Deployment Ready" >> deployment-summary.md
              echo "This image is now available for production deployment!" >> deployment-summary.md
            else
              echo "" >> deployment-summary.md
              echo "### 🧪 Development Image" >> deployment-summary.md
              echo "This feature branch image is available for testing." >> deployment-summary.md
            fi
            echo "" >> deployment-summary.md
            echo "### 📊 Build Artifacts" >> deployment-summary.md
            echo "- ✅ Security scanned (Snyk)" >> deployment-summary.md
            echo "- ✅ Code quality checked (SonarQube)" >> deployment-summary.md
            echo "- ✅ Tests passed" >> deployment-summary.md
            echo "- ✅ Container security verified" >> deployment-summary.md

      - store_artifacts:
          path: deployment-summary.md
          destination: deployment-reports/deployment-summary.md

# ============================================================================
# Workflows
# ============================================================================
workflows:
  version: 2

  # Main CI/CD Pipeline
  ci-cd-pipeline:
    jobs:
      # Build and test
      - build-and-test:
          filters:
            branches:
              only: /.*/

      # Security and quality analysis
      - snyk-security-scan:
          context: dotnet-webapi-security
          requires:
            - build-and-test
          filters:
            branches:
              only: /.*/

      - sonarqube-scan:
          context: dotnet-webapi-security
          requires:
            - build-and-test
          filters:
            branches:
              only: /.*/

      # Docker build and scan
      - build-and-scan-docker-image:
          context: dotnet-webapi-security
          requires:
            - build-and-test
            - snyk-security-scan
            - sonarqube-scan
          filters:
            branches:
              only: /.*/

      # Deploy to JFrog registry (main branch only)
      - push-docker-image-jfrog:
          context: dotnet-webapi-security
          requires:
            - build-and-scan-docker-image
          filters:
            branches:
              only:
                - main
                - master
